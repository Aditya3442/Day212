class Solution {
    public int first(int[] arr , int target) {
        int left = 0;
        int right = arr.length - 1;
        int last = -1;
        while(left <= right) {
            int mid = (left + right) / 2;
            if(arr[mid] == target) {
                last = mid;
                right = mid - 1;
            }
            else if(arr[mid] > target) {
                right = mid - 1;
            }
            else {
                left = mid + 1;
            }
        }
        return last;
    }
    public int last(int[] arr , int target) {
        int left = 0;
        int right = arr.length - 1;
        int last = -1;
        while(left <= right) {
            int mid = (left + right) / 2;
            if(arr[mid] == target) {
                last = mid;
                left = mid + 1;
            }
            else if(arr[mid] > target) {
                right = mid - 1;
            }
            else {
                left = mid + 1;
            }
        }
        return last;
    }
    public int rowWithMax1s(int arr[][]) {
        // code here
        int n = arr.length;
        int maxi = -1;
        int index = -1;
        for(int i = 0; i < n; i++) {
            int firstPos = first(arr[i] , 1);
            if(firstPos == -1)
              continue;
            int lastPos = last(arr[i] , 1);
            if(lastPos - firstPos + 1 > maxi) {
                maxi = Math.max(maxi , lastPos - firstPos + 1);
                index = i;
            }
            
        }
        return index;
    }
}
